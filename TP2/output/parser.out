Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Z
Rule 1     Z -> Exp FIM
Rule 2     Exp -> ( + Lista Exp )
Rule 3     Exp -> ( * Lista Exp )
Rule 4     Exp -> num
Rule 5     Lista -> Lista Exp
Rule 6     Lista -> Exp

Terminals, with rules where they appear

(                    : 2 3
)                    : 2 3
*                    : 3
+                    : 2
FIM                  : 1
error                : 
num                  : 4

Nonterminals, with rules where they appear

Exp                  : 1 2 3 5 6
Lista                : 2 3 5
Z                    : 0

Parsing method: LALR

state 0

    (0) S' -> . Z
    (1) Z -> . Exp FIM
    (2) Exp -> . ( + Lista Exp )
    (3) Exp -> . ( * Lista Exp )
    (4) Exp -> . num

    (               shift and go to state 3
    num             shift and go to state 4

    Z                              shift and go to state 1
    Exp                            shift and go to state 2

state 1

    (0) S' -> Z .



state 2

    (1) Z -> Exp . FIM

    FIM             shift and go to state 5


state 3

    (2) Exp -> ( . + Lista Exp )
    (3) Exp -> ( . * Lista Exp )

    +               shift and go to state 6
    *               shift and go to state 7


state 4

    (4) Exp -> num .

    FIM             reduce using rule 4 (Exp -> num .)
    (               reduce using rule 4 (Exp -> num .)
    num             reduce using rule 4 (Exp -> num .)
    )               reduce using rule 4 (Exp -> num .)


state 5

    (1) Z -> Exp FIM .

    $end            reduce using rule 1 (Z -> Exp FIM .)


state 6

    (2) Exp -> ( + . Lista Exp )
    (5) Lista -> . Lista Exp
    (6) Lista -> . Exp
    (2) Exp -> . ( + Lista Exp )
    (3) Exp -> . ( * Lista Exp )
    (4) Exp -> . num

    (               shift and go to state 3
    num             shift and go to state 4

    Lista                          shift and go to state 8
    Exp                            shift and go to state 9

state 7

    (3) Exp -> ( * . Lista Exp )
    (5) Lista -> . Lista Exp
    (6) Lista -> . Exp
    (2) Exp -> . ( + Lista Exp )
    (3) Exp -> . ( * Lista Exp )
    (4) Exp -> . num

    (               shift and go to state 3
    num             shift and go to state 4

    Lista                          shift and go to state 10
    Exp                            shift and go to state 9

state 8

    (2) Exp -> ( + Lista . Exp )
    (5) Lista -> Lista . Exp
    (2) Exp -> . ( + Lista Exp )
    (3) Exp -> . ( * Lista Exp )
    (4) Exp -> . num

    (               shift and go to state 3
    num             shift and go to state 4

    Exp                            shift and go to state 11

state 9

    (6) Lista -> Exp .

    (               reduce using rule 6 (Lista -> Exp .)
    num             reduce using rule 6 (Lista -> Exp .)


state 10

    (3) Exp -> ( * Lista . Exp )
    (5) Lista -> Lista . Exp
    (2) Exp -> . ( + Lista Exp )
    (3) Exp -> . ( * Lista Exp )
    (4) Exp -> . num

    (               shift and go to state 3
    num             shift and go to state 4

    Exp                            shift and go to state 12

state 11

    (2) Exp -> ( + Lista Exp . )
    (5) Lista -> Lista Exp .

    )               shift and go to state 13
    (               reduce using rule 5 (Lista -> Lista Exp .)
    num             reduce using rule 5 (Lista -> Lista Exp .)


state 12

    (3) Exp -> ( * Lista Exp . )
    (5) Lista -> Lista Exp .

    )               shift and go to state 14
    (               reduce using rule 5 (Lista -> Lista Exp .)
    num             reduce using rule 5 (Lista -> Lista Exp .)


state 13

    (2) Exp -> ( + Lista Exp ) .

    FIM             reduce using rule 2 (Exp -> ( + Lista Exp ) .)
    (               reduce using rule 2 (Exp -> ( + Lista Exp ) .)
    num             reduce using rule 2 (Exp -> ( + Lista Exp ) .)
    )               reduce using rule 2 (Exp -> ( + Lista Exp ) .)


state 14

    (3) Exp -> ( * Lista Exp ) .

    FIM             reduce using rule 3 (Exp -> ( * Lista Exp ) .)
    (               reduce using rule 3 (Exp -> ( * Lista Exp ) .)
    num             reduce using rule 3 (Exp -> ( * Lista Exp ) .)
    )               reduce using rule 3 (Exp -> ( * Lista Exp ) .)

