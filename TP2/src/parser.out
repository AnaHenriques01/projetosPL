Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BCOM
    BFUNY
    BGRAM
    BPARSER
    BYACC
    ECOM
    EFUNY
    EGRAM
    PREC
    TS
    comm
    funY
    gram
    instructions
    preceList
    tsList

Grammar

Rule 0     S' -> Ply-Simple
Rule 1     Ply-Simple -> Lex EOF
Rule 2     Lex -> BLEX Vars Funs
Rule 3     Vars -> Vars Var
Rule 4     Vars -> <empty>
Rule 5     Var -> LIT literals
Rule 6     Var -> IGN ig
Rule 7     Var -> TOK tokenList
Rule 8     Funs -> Funs Fun EFUNL
Rule 9     Funs -> <empty>
Rule 10    Fun -> BFUNL funL

Terminals, with rules where they appear

BCOM                 : 
BFUNL                : 10
BFUNY                : 
BGRAM                : 
BLEX                 : 2
BPARSER              : 
BYACC                : 
ECOM                 : 
EFUNL                : 8
EFUNY                : 
EGRAM                : 
EOF                  : 1
IGN                  : 6
LIT                  : 5
PREC                 : 
TOK                  : 7
TS                   : 
comm                 : 
error                : 
funL                 : 10
funY                 : 
gram                 : 
ig                   : 6
instructions         : 
literals             : 5
preceList            : 
tokenList            : 7
tsList               : 

Nonterminals, with rules where they appear

Fun                  : 8
Funs                 : 2 8
Lex                  : 1
Ply-Simple           : 0
Var                  : 3
Vars                 : 2 3

Parsing method: LALR

state 0

    (0) S' -> . Ply-Simple
    (1) Ply-Simple -> . Lex EOF
    (2) Lex -> . BLEX Vars Funs

    BLEX            shift and go to state 3

    Ply-Simple                     shift and go to state 1
    Lex                            shift and go to state 2

state 1

    (0) S' -> Ply-Simple .



state 2

    (1) Ply-Simple -> Lex . EOF

    EOF             shift and go to state 4


state 3

    (2) Lex -> BLEX . Vars Funs
    (3) Vars -> . Vars Var
    (4) Vars -> .

    LIT             reduce using rule 4 (Vars -> .)
    IGN             reduce using rule 4 (Vars -> .)
    TOK             reduce using rule 4 (Vars -> .)
    BFUNL           reduce using rule 4 (Vars -> .)
    EOF             reduce using rule 4 (Vars -> .)

    Vars                           shift and go to state 5

state 4

    (1) Ply-Simple -> Lex EOF .

    $end            reduce using rule 1 (Ply-Simple -> Lex EOF .)


state 5

    (2) Lex -> BLEX Vars . Funs
    (3) Vars -> Vars . Var
    (8) Funs -> . Funs Fun EFUNL
    (9) Funs -> .
    (5) Var -> . LIT literals
    (6) Var -> . IGN ig
    (7) Var -> . TOK tokenList

    BFUNL           reduce using rule 9 (Funs -> .)
    EOF             reduce using rule 9 (Funs -> .)
    LIT             shift and go to state 8
    IGN             shift and go to state 9
    TOK             shift and go to state 10

    Funs                           shift and go to state 6
    Var                            shift and go to state 7

state 6

    (2) Lex -> BLEX Vars Funs .
    (8) Funs -> Funs . Fun EFUNL
    (10) Fun -> . BFUNL funL

    EOF             reduce using rule 2 (Lex -> BLEX Vars Funs .)
    BFUNL           shift and go to state 12

    Fun                            shift and go to state 11

state 7

    (3) Vars -> Vars Var .

    LIT             reduce using rule 3 (Vars -> Vars Var .)
    IGN             reduce using rule 3 (Vars -> Vars Var .)
    TOK             reduce using rule 3 (Vars -> Vars Var .)
    BFUNL           reduce using rule 3 (Vars -> Vars Var .)
    EOF             reduce using rule 3 (Vars -> Vars Var .)


state 8

    (5) Var -> LIT . literals

    literals        shift and go to state 13


state 9

    (6) Var -> IGN . ig

    ig              shift and go to state 14


state 10

    (7) Var -> TOK . tokenList

    tokenList       shift and go to state 15


state 11

    (8) Funs -> Funs Fun . EFUNL

    EFUNL           shift and go to state 16


state 12

    (10) Fun -> BFUNL . funL

    funL            shift and go to state 17


state 13

    (5) Var -> LIT literals .

    LIT             reduce using rule 5 (Var -> LIT literals .)
    IGN             reduce using rule 5 (Var -> LIT literals .)
    TOK             reduce using rule 5 (Var -> LIT literals .)
    BFUNL           reduce using rule 5 (Var -> LIT literals .)
    EOF             reduce using rule 5 (Var -> LIT literals .)


state 14

    (6) Var -> IGN ig .

    LIT             reduce using rule 6 (Var -> IGN ig .)
    IGN             reduce using rule 6 (Var -> IGN ig .)
    TOK             reduce using rule 6 (Var -> IGN ig .)
    BFUNL           reduce using rule 6 (Var -> IGN ig .)
    EOF             reduce using rule 6 (Var -> IGN ig .)


state 15

    (7) Var -> TOK tokenList .

    LIT             reduce using rule 7 (Var -> TOK tokenList .)
    IGN             reduce using rule 7 (Var -> TOK tokenList .)
    TOK             reduce using rule 7 (Var -> TOK tokenList .)
    BFUNL           reduce using rule 7 (Var -> TOK tokenList .)
    EOF             reduce using rule 7 (Var -> TOK tokenList .)


state 16

    (8) Funs -> Funs Fun EFUNL .

    BFUNL           reduce using rule 8 (Funs -> Funs Fun EFUNL .)
    EOF             reduce using rule 8 (Funs -> Funs Fun EFUNL .)


state 17

    (10) Fun -> BFUNL funL .

    EFUNL           reduce using rule 10 (Fun -> BFUNL funL .)

