%% LEX

%literals = ['(',')','+','*']
%tokens = ['num','FIM']
%ignore = " \t\n"

\d+                         return('num','t.value=int(t.value)')
\.                          simpleToken('FIM','')
.                           error(f"Caracter ilegal: , {t.value[0]}",t.lexer.skip(1))

lexer = lex.lex()

%% YACC

/%

Z : Exp FIM                             {print("Resultado: ", p[1])}
Exp : '(' '+' Lista Exp ')'             {p[0] = somatorio(p[3]) + p[4]}
Exp : '(' '*' Lista Exp ')'             {p[0] = produtorio(p[3]) * p[4]}
Exp : num                               {p[0] = p[1]}
Lista : Lista Exp                       {p[0] = p[1] + [p[2]]}
Lista : Exp                             {p[0] = [p[1]]}

%%

def p_error(p):
    print("Erro sintático: ", p)
    parser.success = False

def produtorio(lista):
    res = 1
    for elem in lista:
        res *= elem
    return res

def somatorio(lista):
    res = 0
    for elem in lista:
        res += elem
    return res

/%parser = yacc.yacc()

/%import sys
/%for linha in sys.stdin:
/%      parser.success = True
/%      parser.parse(linha)
/%      if parser.success:
/%          print('Frase válida: ', linha)
/%      else:
/%          print('Frase inválida.')